import java.awt.Point;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int T;
	static int M, N, K;
	static int map[][];
	static int visit[][];
	static int cnt;
	int dir_x[] = {0, -1, 0, 1};
	int dir_y[] = {-1, 0, 1, 0};
	static Queue<Point> queue = new LinkedList<Integer>();
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());
		// System.out.println(T);
		int x, y;

		for (int i = 0; i < T; i++) {

			StringTokenizer st = new StringTokenizer(br.readLine());
			M = Integer.parseInt(st.nextToken());
			N = Integer.parseInt(st.nextToken());
			K = Integer.parseInt(st.nextToken());
			// System.out.println(M +" "+ N +" "+ K);
			
			map= new int[M][N];
			
			for(int j=0; j<K; j++) {
				StringTokenizer st1 = new StringTokenizer(br.readLine());
				x = Integer.parseInt(st1.nextToken());
				y = Integer.parseInt(st1.nextToken());
				map[x][y]= 1;
			}
			
			
			bfs();
		}
		
		
	}
	
	
	static void bfs() {
		
		for(int i=0; i<M; i++) {
			for(int j=0; j<N; j++) {
				if(map[i][j]==1 && visit[i][j]==0) {
					visit[i][j]=1;
					queue.offer(new Point(new_x, new_y));
					cnt++;
				}
			}
		}
		
		
		
	}
}
