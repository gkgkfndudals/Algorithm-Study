import java.awt.Point;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int T;
	static int M, N, K;
	static int map[][];
	static int visit[][];
	static int cnt;
	static int dir_x[] = { 0, -1, 0, 1 };
	static int dir_y[] = { -1, 0, 1, 0 };
	static Queue<Point> queue = new LinkedList<Point>();
	static ArrayList<Integer> list= new ArrayList<Integer>();
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());
		// System.out.println(T);
		int x, y;

		for (int i = 0; i < T; i++) {

			StringTokenizer st = new StringTokenizer(br.readLine());
			M = Integer.parseInt(st.nextToken());
			N = Integer.parseInt(st.nextToken());
			K = Integer.parseInt(st.nextToken());
			// System.out.println(M +" "+ N +" "+ K);

			map = new int[M][N];

			for (int j = 0; j < K; j++) {
				StringTokenizer st1 = new StringTokenizer(br.readLine());
				x = Integer.parseInt(st1.nextToken());
				y = Integer.parseInt(st1.nextToken());
				map[x][y] = 1;
			}

			for(int i=0; i<M ;i ++) {
				for(int j=0; j<N; j++) {
					if(map[i][j] == 1 && visit[i][j] == 0) {
						bfs(i, j);
						
					}
					
				}
			}
			
		}

	}

	static void bfs(int x, int y) {
		int new_x;
		int new_y;

		while (!queue.isEmpty()) {
			for (int i = 0; i < M; i++) {
				for (int j = 0; j < N; j++) {
					if (map[i][j] == 1 && visit[i][j] == 0) {
						visit[i][j] = 1;
						new_x = i + dir_x[j];
						new_y = j + dir_y[j];

						if (new_x >= 0 && new_y >= 0 && new_x <= N && new_y <= M) {
							queue.offer(new Point(new_x, new_y));
							cnt++;
						}

					}

				}

			}
		}

	}
}
