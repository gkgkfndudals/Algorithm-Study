import java.awt.Point;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Ex {
	static int N, M;
	static int map[][];
	static int temp[][];
	static ArrayList<Point> virus_pos = new ArrayList<Point>();

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];
		temp = new int[N][M];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 2)
					virus_pos.add(new Point(i, j));
			}
		}

		combinationBF(0, 0);

	}

	static void combinationBF(int idx, int depth) {
		if (depth == 3) {
			
		}

		for (int i = idx; i < N * M; i++) {
			int x = i / M;
			int y = i % M;
			
			if(map[x][y]==0) {
				map[x][y]=1;
				combinationBF(idx + 1 , depth + 1);
				map[x][y]=0;
			}
		}
		
	}

	static void copyArr() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				temp[i][j] = map[i][j];
			}
		}
	}

}
